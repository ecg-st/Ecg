#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NO_SUCH_VALUE -123

/////////////////////////////////////////////////////////////////////////
//对double数组求导数
/////////////////////////////////////////////////////////////////////////
void deriv_double_array(double *src, double *rst, int len);

/////////////////////////////////////////////////////////////////////////
//对double数组求平均
/////////////////////////////////////////////////////////////////////////
double mean_double_array(double *dp, int len);


//////////////////////////////////////////////////////////////////////
//对int数组元素逐项取绝对值
//////////////////////////////////////////////////////////////////////
void abs_int_array(int *src,		//待处理的数组
					int len,		//待处理的数组长度
					int *dst);		//结果存放数组

//////////////////////////////////////////////////////////////////////
//对double数组元素逐项取绝对值
//////////////////////////////////////////////////////////////////////
void abs_double_array(double *src,		//待处理的数组
					int len,		//待处理的数组长度
					double *dst);		//结果存放数组


//////////////////////////////////////////////////////////////////////
//实现int数组src与value的逐项比较：大于为1，等于为0，小于为-1
//////////////////////////////////////////////////////////////////////
void int_array_cmp_value(int *src,		//待处理的数组
						int len,		//待处理的数组长度
						int *dst,		//结果存放数组
						double value);	//带比较的值

//////////////////////////////////////////////////////////////////////
//实现double数组src与value的逐项比较：大于为1，等于为0，小于为-1
//////////////////////////////////////////////////////////////////////
void double_array_cmp_value(double const *src,	//待处理的数组
							int len,			//待处理的数组长度
							int *dst,			//结果存放数组
							double value);		//待比较的值

//////////////////////////////////////////////////////////////////////////////
//在int数组中找出某定值，并返回所要求的位置："first" ， "last" or "all"
//如果是first或last，结果直接返回，
//如果找不到，则返回 NO_SUCH_VALUE，可以用返回值小于0来检验是否找到
//如果是all，结果存放在传入的结果数组的指针指向的位置，并返回查找到的数量，
//找不到则返回0
//////////////////////////////////////////////////////////////////////////////
int find_val_in_int_array(int *p,				//待搜索数组
							 int len,				//数组的长度
							 int val,			//待搜索值
							 char *type,	//搜索的位置
							 int *pos );		//如果type为all，则需要传入


//////////////////////////////////////////////////////////////////////////////
//在double数组中找出某定值，并返回所要求的位置："first" ， "last" or "all"
//如果是first或last，结果直接返回，
//如果找不到，则返回 NO_SUCH_VALUE，可以用返回值小于0来检验是否找到
//如果是all，结果存放在传入的结果数组的指针指向的位置，并返回查找到的数量，
//找不到则返回0
//////////////////////////////////////////////////////////////////////////////
int find_val_in_double_array(double *p,				//待搜索数组
							 int len,				//数组的长度
							 double val,			//待搜索值
							 char *type,	//搜索的位置
							 int *pos);		//如果type为all，则需要传入


//////////////////////////////////////
//打印数组
//////////////////////////////////////
void print_array( char type,		//数组类型
				 int len,			//数组长度
				 void const *p);		//数组起始地址

/////////////////////////////////////
//实现数组逐项相与，非零为真，返回int
/////////////////////////////////////


/////////////////////////////////////////////////////////////////
//在double数组中找出最大值，返回最大值
/////////////////////////////////////////////////////////////////
double max_double_array( double const *p, int len );

/////////////////////////////////////////////////////////////////
//在double数组中找出最小值，返回最小值
/////////////////////////////////////////////////////////////////
double min_double_array( double const *p, int len );


/////////////////////////////////////////////////////////////////
//在double数组中找出最大值，返回其中一个的位置："first" or "last"
/////////////////////////////////////////////////////////////////
int find_max_double_array( double const *p, 
						  int len, 
						  char *num );

/////////////////////////////////////////////////////////////////
//在double数组中找出最小值，返回其中一个的位置："first" or "last"
/////////////////////////////////////////////////////////////////
int find_min_double_array( double const *p, 
						  int len, 
						  char *num );

////////////////////////////////////////////////////////
//double数组 + value
////////////////////////////////////////////////////////
void double_array_plus_val (double *src, 
							int len, 
							double val,						
							double *dst );

////////////////////////////////////////////////////////
//double数组 - value
////////////////////////////////////////////////////////
void double_array_minus_val (double *src, 
							int len, 
							double val,						
							double *dst );

////////////////////////////////////////////////////////
//double数组 * value
////////////////////////////////////////////////////////
void double_array_mutiply_val (double *src, 
							int len, 
							double val,						
							double *dst );

////////////////////////////////////////////////////////
//double数组 / value
////////////////////////////////////////////////////////
void double_array_divide_val (double *src, 
							int len, 
							double val,						
							double *dst );

////////////////////////////////////////////////////////
//double数组src1 + double数组src2
////////////////////////////////////////////////////////
void double_array_plus_double_array (double *src1,
							 double *src2,
							int len, 		
							double *dst );

////////////////////////////////////////////////////////
//double数组src1 - double数组src2
////////////////////////////////////////////////////////
void double_array_minus_double_array (double *src1,
							 double *src2,
							int len, 				
							double *dst );


////////////////////////////////////////////////////////
//double数组src1 .* double数组src2
////////////////////////////////////////////////////////
void double_array_multiply_double_array (double *src1,
							 double *src2,
							int len, 				
							double *dst );


////////////////////////////////////////////////////////
//double数组src1 .* int数组src2
////////////////////////////////////////////////////////
void double_array_multiply_int_array (double *src1,
							 int *src2,
							int len, 				
							double *dst );

////////////////////////////////////////////////////////
//double数组src1 ./ double数组src2
////////////////////////////////////////////////////////
void double_array_divide_double_array (double *src1,
							 double *src2,
							int len, 				
							double *dst );

////////////////////////////////////////////////////////
//int数组 + value
////////////////////////////////////////////////////////
void int_array_plus_val (int *src, 
							int len, 
							int val,						
							int *dst );


////////////////////////////////////////////////////////
//int数组 - value
////////////////////////////////////////////////////////
void int_array_minus_val (int *src, 
							int len, 
							int val,						
							int *dst );

////////////////////////////////////////////////////////
//int数组 * value
////////////////////////////////////////////////////////
void int_array_mutiply_val (int *src, 
							int len, 
							int val,						
							int *dst );

////////////////////////////////////////////////////////
//int数组 / value
////////////////////////////////////////////////////////
void int_array_divide_val (int *src, 
							int len, 
							int val,						
							int *dst );


////////////////////////////////////////////////////////
//int数组src1 + int数组src2
////////////////////////////////////////////////////////
void int_array_plus_int_array (int *src1,
							 int *src2,
							int len, 		
							int *dst );

////////////////////////////////////////////////////////
//int数组src1 - int数组src2
////////////////////////////////////////////////////////
void int_array_minus_int_array (int *src1,
							 int *src2,
							int len, 				
							int *dst );


/////////////////////////////////////////////////////////////
//实现int数组逐项相或，非零为真，
//结果存放在dst数组中，或是src1中
/////////////////////////////////////////////////////////////
void int_array_or_int_array (int *src1,
							 int *src2,
							int len, 		
							int *dst);

/////////////////////////////////////////////////////////////
//实现int数组之间的逐项相与，非零为真，
//结果存放在dst数组中，或是src1中
/////////////////////////////////////////////////////////////
void int_array_and_int_array (int *src1,
							 int *src2,
							int len, 		
							int *dst);

/////////////////////////////////////////////////////////////
//实现double数组之间的逐项相与，非零为真，返回int
/////////////////////////////////////////////////////////////
void double_array_and_double_array (double *src1,
							 double *src2,
							int len, 		
							double *dst);